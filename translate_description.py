import requests
import json
import os
from typing import Optional

# –í–∞—Ä–∏–∞–Ω—Ç—ã —É–ø–∞–∫–æ–≤–∫–∏
PACKAGING_TYPES = {
    'IN_BULK': 'in bulk',
    'BIG_BAGS': 'big bags',
    'BIG_BAGS_INSIDE_CONTAINER': 'big bags inside container'
}

# DeepL API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DEEPL_API_URL = "https://api-free.deepl.com/v2/translate"
DEEPL_API_KEY = os.getenv('DEEPL_API_KEY')  # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã

def translate_with_deepl(text: str, target_lang: str) -> Optional[str]:
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ DeepL API
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        target_lang: –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫ ('RU' –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ, 'UK' –¥–ª—è —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ)
    
    Returns:
        –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    if not DEEPL_API_KEY:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω DEEPL_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: export DEEPL_API_KEY='–≤–∞—à_–∫–ª—é—á'")
        return None
    
    headers = {
        'Authorization': f'DeepL-Auth-Key {DEEPL_API_KEY}',
        'Content-Type': 'application/x-www-form-urlencoded'
    }
    
    data = {
        'text': text,
        'target_lang': target_lang,
        'source_lang': 'EN'
    }
    
    try:
        response = requests.post(DEEPL_API_URL, headers=headers, data=data)
        response.raise_for_status()
        
        result = response.json()
        if 'translations' in result and len(result['translations']) > 0:
            return result['translations'][0]['text']
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {result}")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ JSON: {e}")
        return None

def generate_descriptions():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, —Ä—É—Å—Å–∫–æ–º –∏ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º —á–µ—Ä–µ–∑ DeepL
    """
    descriptions = {}
    
    for packaging_type, packaging_name in PACKAGING_TYPES.items():
        # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –æ—Ä–∏–≥–∏–Ω–∞–ª
        eng_description = f"Ukrainian corn {packaging_name}, 2025 production year (hereinafter 'Goods')"
        
        # –†—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ DeepL
        ru_description = translate_with_deepl(eng_description, 'RU')
        
        # –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ DeepL
        uk_description = translate_with_deepl(eng_description, 'UK')
        
        descriptions[packaging_type] = {
            'english': eng_description,
            'russian': ru_description,
            'ukrainian': uk_description
        }
    
    return descriptions

def print_descriptions():
    """
    –í—ã–≤–æ–¥–∏—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–∏—Å–∞–Ω–∏–π
    """
    descriptions = generate_descriptions()
    
    print("=" * 80)
    print("–û–ü–ò–°–ê–ù–ò–Ø –¢–û–í–ê–†–ê –î–õ–Ø –†–ê–ó–ù–´–• –í–ò–î–û–í –£–ü–ê–ö–û–í–ö–ò")
    print("=" * 80)
    
    for packaging_type, translations in descriptions.items():
        print(f"\nüì¶ –£–ø–∞–∫–æ–≤–∫–∞: {packaging_type}")
        print(f"   ({PACKAGING_TYPES[packaging_type]})")
        print("-" * 60)
        print(f"üá∫üá∏ English: {translations['english']}")
        print(f"üá∑üá∫ Russian: {translations['russian']}")
        print(f"üá∫üá¶ Ukrainian: {translations['ukrainian']}")
        print()

def get_description_for_packaging(packaging_type, language='english'):
    """
    –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —É–ø–∞–∫–æ–≤–∫–∏ –∏ —è–∑—ã–∫–∞
    
    Args:
        packaging_type: IN_BULK, BIG_BAGS, –∏–ª–∏ BIG_BAGS_INSIDE_CONTAINER
        language: 'english', 'russian', –∏–ª–∏ 'ukrainian'
    
    Returns:
        str: –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
    """
    descriptions = generate_descriptions()
    
    if packaging_type not in descriptions:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–ø–∞–∫–æ–≤–∫–∏: {packaging_type}")
    
    if language not in descriptions[packaging_type]:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫: {language}")
    
    return descriptions[packaging_type][language]

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    print_descriptions()
    
    print("\n" + "=" * 80)
    print("–ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø")
    print("=" * 80)
    
    # –ü—Ä–∏–º–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —É–ø–∞–∫–æ–≤–∫–∏
    try:
        description_ru = get_description_for_packaging('BIG_BAGS', 'russian')
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ BIG_BAGS –Ω–∞ —Ä—É—Å—Å–∫–æ–º: {description_ru}")
        
        description_uk = get_description_for_packaging('IN_BULK', 'ukrainian')
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ IN_BULK –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º: {description_uk}")
        
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
    
    print("\n" + "=" * 80)
    print("–ù–ê–°–¢–†–û–ô–ö–ê DEEPL API")
    print("=" * 80)
    print("""
1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ https://www.deepl.com/pro-api
2. –ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –∫–ª—é—á (500,000 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –º–µ—Å—è—Ü)
3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ä–µ–¥—ã:
   
   Windows (PowerShell):
   $env:DEEPL_API_KEY="–≤–∞—à_–∫–ª—é—á_–∑–¥–µ—Å—å"
   
   Windows (CMD):
   set DEEPL_API_KEY=–≤–∞—à_–∫–ª—é—á_–∑–¥–µ—Å—å
   
   Linux/Mac:
   export DEEPL_API_KEY="–≤–∞—à_–∫–ª—é—á_–∑–¥–µ—Å—å"
4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç: python translate_description.py
    """)
    
    print("\n" + "=" * 80)
    print("–ö–û–î –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 80)
    print("""
# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –≤–∞—à–µ–º –∫–æ–¥–µ:
from translate_description import get_description_for_packaging

# –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è BIG_BAGS –Ω–∞ —Ä—É—Å—Å–∫–æ–º
description = get_description_for_packaging('BIG_BAGS', 'russian')

# –ò–ª–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–∞—à–∏–º –∫–ª–∞—Å—Å–æ–º business:
def get_goods_description(business):
    return get_description_for_packaging(business.packaging_type, 'russian')
    """) 